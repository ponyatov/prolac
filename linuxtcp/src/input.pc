#ifndef INPUT_PC
#define INPUT_PC
#undef BSD

module InputBase
has .Segment, .TCB, Util
{
  
  field tcb :> *TCB using all;
  field seg :> *Segment using all;
  constructor(s :> *Segment, t :> *TCB) ::=
    seg = s, tcb = t;

  set-input-tcb(t :> *TCB) ::= tcb = t;
  
  exception ack-drop;
  exception reset-drop;
  exception abort-connection;
  exception drop;
  exception stop;
  
} inline all;


module Base.Input :> InputBase
has .Segment, .TCB, .Socket, .Statistics,
  .Listen inline run, .SynSent inline run, .Ack inline run,
  .Reassembly, .Fin inline run, .Reset inline run, .TrimToWindow inline run,
  .Output, TimeWait,
  TopInput
{
  
  static receive-segment(s :> *Segment) ::=
    pathinline TopInput(s, 0).catch-receive-segment;
  
  catch-receive-segment ::=
    do-receive-segment
    catch ack-drop ==> mark-pending-ack, Output(tcb).run, drop
    catch reset-drop ==> send-reset, drop
    catch abort-connection ==> close-connection, drop
    catch drop ==> seg->free, stop
    catch stop;
  
  
  static receive-segment-backlog(s :> *Segment, tcb :> *TCB) ::=
    inline TopInput(s, tcb).catch-process-segment;

  catch-process-segment ::=
    do-process-segment
    catch ack-drop ==> mark-pending-ack, Output(tcb).run, drop
    catch reset-drop ==> send-reset, drop
    catch abort-connection ==> close-connection, drop
    catch drop ==> seg->free, stop
    catch stop;
  
  
  do-receive-segment ::=
    check-segment-and-find-tcb,
    check-socket-ready-to-receive,
    do-process-segment;
  
  check-segment-and-find-tcb ::=
    Statistics.mark-got-segment, // NB: counts even if pkt_type != PACKET_HOST
    (!seg->check-incoming ==> Statistics.mark-got-bad-segment, drop),
    seg->prepare-incoming,
    (!find-tcb ==> reset-drop);
  
  find-tcb :> bool ::=
    let s = Socket.find(seg) in
      (s ==> tcb = s->tcb, true)
      ||| false
    end;
  
  check-socket-ready-to-receive ::=
    (time-wait ==> TimeWait.run(seg, tcb)),
    (socket->locked ==>		// don't modify the socket if someone is
				// reading from it right now; queue packet for
				// later
     socket->add_to_backlog(seg), stop);
  
  
  do-process-segment ::= 
#ifdef PRINT
    seg->print, tcb->print,
#endif
    (closed ==> reset-drop)
    || (listen ==> do-listen)
    || (syn-sent ==> do-syn-sent)
    || other-states;
  
  other-states ::= 
    /* XXX PAWS */
    trim-to-window,
    //(/*!tcb->socket->has-filedesc*/
    //seg->len && closing-or-after ==> reset-drop), 
    /* XXX record timestamp v2p963 */
    (rst ==> do-reset),
    (syn ==> reset-drop),
    (!ack ==> drop), do-ack,
    process-data;
  
  process-data ::= 
    (urg ==> check-urg),
    let is-fin = do-reassembly in
      (is-fin ==> do-fin)
    end,
    send-data-or-ack;

  
  do-listen ::=
    Listen(seg, tcb).run;
  do-syn-sent ::=
    SynSent(seg, tcb).run;
  trim-to-window ::=
    TrimToWindow(seg, tcb).run;
  do-reset ::=
    Reset(seg, tcb).run;
  do-ack ::=
    Ack(seg, tcb).run;
  check-urg ::= true;
  do-reassembly :> bool ::=
    Reassembly.run(seg, tcb);
  do-fin ::=
    Fin(seg, tcb).run;
  
  // XXX double-check appropriateness of using seg->ackno rather than
  // something like snd_next
  send-reset ::=
    // XXX `tcb' might be null at this point
    rst				// Don't need to reset a reset.
    || (ack ==>  Output.send-reset(seg, seg->ackno))
    || (!ack ==> Output.send-ack-reset(seg, 0, seg->seqno + seg->len));
  
  send-data-or-ack ::= 
    output-pending ==> Output(tcb).run;
  
} inline constructor;


module Base.Listen :> InputBase
has .TrimToWindow
{
  
  run ::=
   (rst ==> drop)
   || (ack ==> reset-drop)
   || (!syn ==> drop)
   || handshake-2;
  
  handshake-2 ::=
    /* SOCK much stuff including mcast; v2p943, 945 */
    let new-sock = socket->new-passive-open(seg->seqno, seg->sport) in 
      //Sender(new-sock->tcb).ack.syn.send,
      /* XXX iss processing v2p945 */
      new-sock->tcb->enter-syn-received,
      new-sock->tcb->mark-pending-output,
      set-input-tcb(new-sock->tcb),
      /* XXX process-tcp-options, */
      continue-processing
    end;
  
  continue-processing ::=
    // trim SYN so that we don't inappropriately stick segment on reassembly
    // queue
    trim-syn,
    TrimToWindow(seg, tcb).run, /* XXX BSD does different trim v2p951 */
    set-send-window(seg), mark-pending-output, // XXX better place?
    /* XXX urg v2p951 */
    process-data;
  
};


module Base.SynSent :> InputBase
has .Listen, .Segment
{ // BSD
  
  run ::=
    (ack && !unseen-ack(seg->ackno) ==> reset-drop)
    || (rst ==> (ack ==> socket->drop), drop)
    || (!syn ==> {PDEBUG("dropping packet with ack but no syn.\n"); } drop)
    || handshake-1;
  
  handshake-1 ::=
    tcb->receive-syn-hook(seg->seqno), /* XXX tcp_rcvseqinit */
    cancel-retransmit,
    mark-pending-ack,
    (ack ==> handshake-complete) // ack was unseen, therefore SYN acked
    || enter-syn-received,
    Listen(seg,tcb).continue-processing;
  
  handshake-complete ::=
    /* SOCK v2p949 */
    new-ack-hook(seg->ackno),
    /* SOCK reassemble -> socket v2p949 */
    enter-established;
  
};


module Base.TrimToWindow :> InputBase
{ // BSD
  
  run ::= 
    let irs = tcb->_irs in
      let rl = receive-window-left - irs, rr = receive-window-right - irs,
       sl = seg->left - irs, sr = seg->right - irs, sa = seg->ackno in
      { PDEBUG("Receive-window-left %d-%d S=%d-%d %d\n", rl, rr, sl, sr, sa); },
    end end,
    (before-window ==> trim-old-data),
    /* XXX BSD handles data receiving if process has terminated v2p957 */
    (after-window ==> trim-early-data);
  
  
  before-window :> bool ::= seg->left < receive-window-left;
  
  trim-old-data {
    
    trim-old-data ::=
      (syn ==> trim-syn),
      (whole-packet-old ==> duplicate-packet)
      || trim-front(receive-window-left - seg->left);
    
    whole-packet-old :> bool ::=
      seg->right <= receive-window-left;
    
    duplicate-packet ::=
      /* XXX reset? mark-pending-ack? */
      clear-fin,
      mark-pending-ack,
      ack-drop;
    
  }
  
  
  after-window :> bool ::= seg->right > receive-window-right;
  
  trim-early-data {
    
    trim-early-data ::=
      (whole-packet-early ==> early-packet)
      || seg->trim-back(seg->right - receive-window-right);
    
    whole-packet-early :> bool ::=
      seg->left >= receive-window-right;
    
    early-packet ::=
      /* XXX TIME_WAIT processing etc v2p958 */
      (receive-window-empty && seg->seqno == receive-window-left ==>
       mark-pending-ack /* STAT rcvwinprobe */)
      /*, drop; .. XXX ack-drop-fail if receive window not empty (immediate ack, as opposed to pending ack)? */
      || { PDEBUG("early packet.\n"); }, ack-drop;
    
  }
  
} inline all
  inline[0] run;


module Base.Reset :> InputBase
{
  
  run ::= assertion(rst),
    ((syn-received ==> do-syn-received)
     || (closing || last-ack || time-wait ==> close-connection)
     || abort-connection);
  
  do-syn-received ::= (passive-open ==> silently-move-to-listen)
      || abort-connection;
  
  passive-open :> bool ::= { assert(0); };
  
  silently-move-to-listen ::=
    do-some-stuff, enter-listen;
  
  do-some-stuff ::= { assert(0); };
  
};



module Base.Ack :> InputBase
{
  
  run ::= assertion(ack),
    do-ack,
    (update-send-window(seg) ==> mark-pending-output);

  do-ack ::=
    (syn-received ==> do-syn-received),
    established-or-after ==>
       do-main ==>
	  do-special;
  
  do-syn-received ::=
      (unseen-ack(seg->ackno) ==> enter-established, set-send-window(seg))
      || reset-drop;
  
  do-main :> bool ::=
    old-ack(seg->ackno) ==> duplicate, false
    ||| unseen-ack(seg->ackno) ==> normal, true
    ||| /* too-new ack */ {PDEBUG("ack is dropping packets.\n"); }ack-drop, false;
  
  duplicate ::= true;
  
  normal ::=
    new-ack-hook(seg->ackno),
    (totally-acked ==> mark-pending-output); // XXX Persist.
  
  do-special ::=
    (fin-wait-1 ==> do-fin-wait-1)
    || (closing ==> do-closing)
    || (last-ack ==> do-last-ack)
    || (time-wait ==> do-time-wait);
  
  do-fin-wait-1 ::= have-sent-fin && totally-acked ==> /* SOCK v2p979 */ enter-fin-wait-2;
  do-closing ::= totally-acked ==> /* SOCK v2p980 */ enter-time-wait;
  do-last-ack ::= 
    totally-acked ==> /* XXX */ close-connection, {PDEBUG("do-last-ack is dropping.\n"); }, drop;
  do-time-wait ::= enter-time-wait, {PDEBUG("do-time-wait is dropping.\n"); }, drop;
  
} inline (do-syn-received, do-main,
          do-special, do-fin-wait-1, do-closing, do-last-ack, do-time-wait);


module Base.Fin :> InputBase { 
  
  run ::=
    mark-pending-ack, /*mark-fin-received,*/
    (syn-received || established ==> enter-close-wait)
    || (fin-wait-1 ==> do-fin-wait-1)
    || (fin-wait-2 ==> do-fin-wait-2)
    || (time-wait ==> do-time-wait);
  
/* I believe we handle this fine now because we use seg->seqlen in receive-hook
  mark-fin-received ::=
    (established || fin-wait-1 || fin-wait-2 ==> receive-hook(1)),
    // XXX mark-deliver also?
    mark-pending-ack; */
  
  do-fin-wait-1 ::=
    (totally-acked ==> enter-time-wait)
    || enter-closing;
  
  do-fin-wait-2 ::=
    enter-time-wait;
  
  do-time-wait ::=
    mark-pending-ack, start-timewait-timer;
  
};


module Base.TimeWait
has .Segment, .TCB {

  static run(seg :> *Segment, tcb :> *TCB) ::=
    /* XXX */;
  
};


// hookup
#define CUR_INPUT	Base.Input
#define CUR_LISTEN	Base.Listen
#define CUR_SYN_SENT	Base.SynSent
#define CUR_TRIM	Base.TrimToWindow
#define CUR_ACK		Base.Ack
#define CUR_FIN		Base.Fin
#define CUR_RESET	Base.Reset
#endif
