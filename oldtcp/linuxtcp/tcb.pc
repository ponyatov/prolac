#ifndef TCB_PC
#define TCB_PC
#define MSS	        576

module Base.TCB :> .Segment-Link
has TCB-State, Tcp-Tcb, .Output, .Segment, .Socket, .Byte-Order {

  static field tcb-list :> Tcp-Tcb;
  static field global-iss :> seqint;
  
  field next-tcb :> *Tcp-Tcb;
  field prev-tcb :> *Tcp-Tcb;
  
  field state :> TCB-State;

  field saddr :> uint;
  field daddr :> uint;

  field local-port :> int;
  field remote-port :> int;
  field _socket :> *Socket;
  
  field snd_una :> seqint;
  field snd_next :> seqint;
  field snd_max :> seqint;	// maximum sequence number sent
  field snd_up :> seqint;
  field iss :> seqint;		// initial send seqno
  
  field rcv_next :> seqint;
  field irs :> seqint;		// initial receive seqno
  
  field mss :> uint;		// maximum segment size
  
  field flags :> ushort;
  
  socket :> *Socket ::= _socket;
  
  
  constructor(s :> *Socket) ::=
    saddr = htonl(0x7f000001),
    daddr = htonl(0x7f000001),
    local-port = s->local-port,
    remote-port = s->remote-port,
    iss = global-iss,
    mss = MSS,
    snd_next = iss,
    snd_max = iss,
    snd_una = iss,
    make-link-sentinel,
    _socket = s,
    flags = 0;
  
  
  // TCB CHAIN
  
  static first-tcb :> *Tcp-Tcb ::= tcb-list.next-tcb;
  static sentinel :> *Tcp-Tcb ::= &tcb-list;
  
  static initialize ::=
    tcb-list.prev-tcb = &tcb-list,
    tcb-list.next-tcb = &tcb-list;
  
  // FLAGS
  
  static F.pending-ack :> ushort ::= 1;
  static F.allow-no-delay :> ushort ::= 2;
  static F.pending-output :> ushort ::= 4;
  static max-flag :> ushort ::= F.pending-output;
  
  test-flag(f :> ushort) :> bool ::= flags & f;
  set-flag(f :> ushort) ::= flags |= f;
  clear-flag(f :> ushort) ::= flags &= ~f;
  
  
  // STATES
  
  connection-exists :> bool ::= have-received-syn;
  
  close-connection ::=
    { tcb_unregister((Tcp_Tcb *)&self); }, flags = 0, enter-closed;
  
  mark-close-after(len :> uint) ::=
    (close-wait ==> enter-last-ack)
    || (established || syn-received ==> enter-fin-wait-1)
    || { assert(0); };
  
  
  // OPTIONS
  
  allow-no-delay :> bool ::= test-flag(F.allow-no-delay);
  
  
  // SEQUENCE NUMBERS
  
  send-idle :> bool ::=			snd_una == snd_max;
  retransmitting :> bool ::=		snd_next < snd_max;
  
  
  // RECEIVED ACKNOWLEDGEMENTS
  
  acked(seqno :> seqint) :> bool ::=	seqno < snd_una;
  totally-acked :> bool ::=		snd_max <= snd_una;
  recently-acked :> bool ::=		snd_next == snd_una;
  
  valid-ack(ackno :> seqint) :> bool ::= ackno >= snd_una && ackno <= snd_max;
  unseen-ack(ackno :> seqint):> bool ::= ackno >  snd_una && ackno <= snd_max;
  old-ack(ackno :> seqint)   :> bool ::= ackno <= snd_una && ackno <= snd_max;
  
  new-ack-hook(ackno :> seqint) ::=
    socket->remove-old-data(ackno - max(iss + 1, snd_una)),
    snd_una = ackno,
    (snd_next < ackno ==> snd_next = ackno), // XXX check always good
    (totally-acked ==> total-ack-hook);
  
  total-ack-hook ::= true;
  
  
  // SENDING
  
  unsent-offset :> uint ::= snd_next - snd_una;
  
  start-retransmission ::= snd_next = snd_una;
  
  mark-pending-ack ::=		set-flag(F.pending-ack);
  ack-pending :> bool ::=	test-flag(F.pending-ack);
  mark-pending-output ::=	set-flag(F.pending-output);
  output-pending :> bool ::=	test-flag(F.pending-ack | F.pending-output);
  
  send-segment(s :> *Segment) ::=
    // Initialize tcp fields.
    print,
    s->_tcp_header->seqno = snd_next,
    s->_tcp_header->sport = local-port,
    s->_tcp_header->dport = remote-port,
    s->host-to-net,
    let state-name = state.name in
      { PDEBUG("Currently in %s\n", state_name); }
    end,
    send-hook(s->seqlen),
    s->len ? send-nonempty-segment(s) : send-empty-segment(s);
  
  send-reset-segment(s :> *Segment) ::=
    // Initialize tcp fields
    s->_tcp_header->sport = local-port,
    s->_tcp_header->dport = remote-port,
    s->host-to-net,
    send-empty-segment(s);
  
  send-hook(seqlen :> uint) ::=
    clear-flag(F.pending-ack | F.pending-output),
    { PDEBUG("  seqlen on send %d\n", seqlen); }
    snd_next += seqlen,		// XXX persist
    snd_max max= snd_next;
  
  send-empty-segment(s :> *Segment) ::= // STAT snd_ack
    { tcp_send_segment(s); };
  send-nonempty-segment(s :> *Segment) ::= // STAT
    { tcp_send_segment(s); };
  
  
  // RECEIVING
  
  expected-seqno(seqno :> seqint) :> bool ::= rcv_next == seqno;
  
  receive-syn-hook(seqno :> seqint) ::=
    irs = seqno,
    rcv_next = seqno + 1;
  
  receive-hook(seqlen :> uint) ::= rcv_next += seqlen;
  
  
  // REASSEMBLY
  
  reassembly-queue :> *Segment ::= next-segment(&self);
  segment-after(seg :> *Segment-Link) :> *Segment ::=
    seg->next-segment(&self);
  segment-before(seg :> *Segment-Link) :> *Segment ::=
    seg->prev-segment(&self);
  
  
  // ALLOCATION, INITIALIZATION, DEALLOCATION
  
  static step-global-iss ::= global-iss += 64000;

  static new(s :> *Socket) :> *Tcp-Tcb ::=
    let tcb :> *Tcp-Tcb in
      { tcb = (Tcp_Tcb *)kmalloc(sizeof(Tcp_Tcb), intr_count ? GFP_ATOMIC :GFP_KERNEL); 
        if (!tcb) {
	  panic("prolac: ERROR! unable to allocate a new tcb!\n");
	  
	}
      },
      tcb->constructor(s),
      { tcb_register(tcb->local_port, tcb->remote_port, tcb); },
      tcb->prev-tcb = &tcb-list,
      tcb->next-tcb = tcb-list.next-tcb,
      tcb-list.next-tcb = tcb,
      tcb->next-tcb->prev-tcb = tcb,
      tcb
    end;

      
  static new-active-open(s :> *Socket) :> *Tcp-Tcb ::=
    let tcb :> *Tcp-Tcb = new(s) in
      step-global-iss,
      tcb
    end;
  
  static new-passive-open(s :> *Socket, irs :> seqint) :> *Tcp-Tcb ::=
    let tcb :> *Tcp-Tcb = new(s) in
      step-global-iss,
      tcb->receive-syn-hook(irs),
      tcb
    end;
  
  static new-listen(s :> *Socket) :> *Tcp-Tcb ::=
    let tcb :> *Tcp-Tcb = new(s) in
      tcb
    end;
  
  static free-all(tcb :> *Tcp-Tcb) ::=
    tcb == TCB.sentinel ==> false
    ||| let n = tcb->next-tcb in
      tcb->free,
      free-all(n),
    end;
    

  free ::=
      next-tcb->prev-tcb = prev-tcb,
      prev-tcb->next-tcb = next-tcb,
      (_socket ==> (_socket->free, _socket = 0)),
      { PDEBUG("Freeing tcb.\n"); kfree(&self); };
  
  
  // PRINTING
  
  print ::= let state_name = state.name in {
    PDEBUG("   -- tcb(%d->%d): %s\n", local_port, remote_port,
	   state_name);
    PDEBUG("    snd_una %u  snd_next %u  snd_max %u  rcv_next %u\n",
	   snd_una, snd_next, snd_max, rcv_next);
  } end, (reassembly-queue ==> print-reassembly-queue);
  
  print-reassembly-queue ::=
    { PDEBUG("     reass Q:"); },
    ((*Segment-Link)&self)->print-link-chain,
    { PDEBUG("\n"); };

  //state-name :> *char ::= let state_name = state.name in state_name end;

  state-name :> *char ::= state.name;
  
  
  force-implicit-rules ::=
    listen, syn-sent, syn-received, established, fin-wait-1, fin-wait-2,
    close-wait, closing, last-ack, time-wait, closed,
    enter-listen, enter-syn-sent, enter-syn-received, enter-established,
    enter-fin-wait-2, enter-close-wait, enter-closing, enter-time-wait,
    have-received-syn, established-or-after, almost-dead, closing-or-after;
  
} inline (initialize, test-flag, set-flag, clear-flag,
	  acked, totally-acked, valid-ack, unseen-ack, old-ack,
	  retransmitting,
	  mark-pending-ack, output-pending,
	  send-hook, expected-seqno, receive-hook,
	  socket, connection-exists,
	  step-global-iss)
  inline[0] (print)
  hide (state, TCB-State, flags, _socket, constructor, new,
	send-empty-segment, send-nonempty-segment)
  show (listen, syn-sent, syn-received, established, fin-wait-1, fin-wait-2,
	close-wait, closing, last-ack, time-wait, closed,
	enter-listen, enter-syn-sent, enter-syn-received, enter-established,
	enter-fin-wait-2, enter-close-wait, enter-closing, enter-time-wait,
	have-received-syn, established-or-after, almost-dead, 
	closing-or-after);


module TCB-State {
  
  V {
    static closed :> int	::= 0;
    static listen :> int	::= 1;
    static syn-sent :> int	::= 2;
    static syn-received :> int	::= 3;
    static established :> int	::= 4;
    static close-wait :> int	::= 5;
    static fin-wait-1 :> int	::= 6;
    static closing :> int	::= 7;
    static last-ack :> int	::= 8;
    static fin-wait-2 :> int	::= 9;
    static time-wait :> int	::= 10;
  }
  
  field v :> int;
  
  constructor ::= v = V.closed;
  
  listen :> bool	::= v == V.listen;
  syn-sent :> bool	::= v == V.syn-sent;
  syn-received :> bool	::= v == V.syn-received;
  established :> bool	::= v == V.established;
  fin-wait-1 :> bool	::= v == V.fin-wait-1;
  fin-wait-2 :> bool	::= v == V.fin-wait-2;
  close-wait :> bool	::= v == V.close-wait;
  closing :> bool	::= v == V.closing;
  last-ack :> bool	::= v == V.last-ack;
  time-wait :> bool	::= v == V.time-wait;
  closed :> bool	::= v == V.closed;
  
  // a separate function so we can potentially instrument it
  set-state(s :> int)	::= v = s, {PDEBUG("enter %s\n", state_names[s]); };
  
  enter-listen		::= set-state(V.listen);
  enter-syn-sent	::= set-state(V.syn-sent);
  enter-syn-received	::= set-state(V.syn-received);
  enter-established	::= set-state(V.established);
  enter-fin-wait-1	::= set-state(V.fin-wait-1);
  enter-fin-wait-2	::= set-state(V.fin-wait-2);
  enter-close-wait	::= set-state(V.close-wait);
  enter-closing		::= set-state(V.closing);
  enter-last-ack	::= set-state(V.last-ack);
  enter-time-wait	::= set-state(V.time-wait);
  enter-closed		::= set-state(V.closed);
  
  have-received-syn :> bool	::= v >= V.syn-received;
  established-or-after :> bool	::= v >= V.established;
  almost-dead :> bool		::= v > V.established;
  closing-or-after :> bool      ::= v >= V.closing;
  
  name :> *char		::= let c :> *char in { c = state_names[v]; }, c end;
  
} hide (v, V, set-state) inline all using all notusing name;


#define CUR_TCB		Base.TCB
#endif
